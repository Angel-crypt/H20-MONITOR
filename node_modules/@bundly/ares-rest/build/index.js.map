{"version":3,"sources":["../src/index.ts","../src/canister-client/api-rest.did.ts","../src/canister-client/canister-client.ts","../src/canister-client/request-parsers.ts","../src/canister-client/response-parsers.ts"],"sourcesContent":["import { Identity } from \"@dfinity/agent\";\n\nimport { CanisterClient, HttpResponse } from \"./canister-client\";\nimport {\n  CreateRestClientInstanceOptions,\n  DeleteConfig,\n  GetConfig,\n  PostConfig,\n  PutConfig,\n  RequestOptions,\n  RestClientInstance,\n} from \"./types\";\n\nexport * from \"./types\";\n\nconst rc = <T>(options: RequestOptions): Promise<HttpResponse<T>> => {\n  const { method, url, data, ...config } = options;\n\n  switch (method) {\n    case \"GET\":\n      return rc.get<T>(url);\n    case \"POST\":\n      return rc.post<T>(url, data, config);\n    case \"PUT\":\n      return rc.put<T>(url, data, config);\n    case \"DELETE\":\n      return rc.delete<T>(url, config);\n    // TODO: Add PATCH, OPTIONS, HEAD methods\n    default:\n      throw new Error(\"Invalid method\");\n  }\n};\n\nrc.get = async <T>(url: string, config?: GetConfig): Promise<HttpResponse<T>> => {\n  const { identity, ...queryConfig } = config || {};\n\n  const urlObj = new URL(url);\n  const client = config?.client || new CanisterClient(urlObj.origin, identity);\n\n  return client.query(\"GET\", urlObj.pathname, queryConfig);\n};\n\nrc.post = async <T>(url: string, data: any, config?: PostConfig): Promise<HttpResponse<T>> => {\n  const { identity, ...postConfig } = config || {};\n\n  const urlObj = new URL(url);\n  const client = config?.client || new CanisterClient(urlObj.origin, identity);\n\n  return client.update(\"POST\", urlObj.pathname, data, postConfig);\n};\n\nrc.put = async <T>(url: string, data: any, config?: PutConfig): Promise<HttpResponse<T>> => {\n  const { identity, ...putConfig } = config || {};\n\n  const urlObj = new URL(url);\n  const client = config?.client || new CanisterClient(urlObj.origin, identity);\n\n  return client.update(\"PUT\", urlObj.pathname, data, putConfig);\n};\n\nrc.delete = async <T>(url: string, config?: DeleteConfig): Promise<HttpResponse<T>> => {\n  const { identity, ...deleteConfig } = config || {};\n\n  const urlObj = new URL(url);\n  const client = config?.client || new CanisterClient(urlObj.origin, identity);\n\n  return client.update(\"DELETE\", urlObj.pathname, {}, deleteConfig);\n};\n\n// TODO: Add PATCH, OPTIONS, HEAD methods\n\nrc.create = (options: CreateRestClientInstanceOptions): RestClientInstance => {\n  const { baseURL, identity } = options;\n\n  const client = new CanisterClient(baseURL, identity);\n\n  const instance = <T>(options: RequestOptions): Promise<HttpResponse<T>> => {\n    const { url } = options;\n    return rc({\n      client,\n      ...options,\n      url: url.startsWith(\"/\") ? url : `/${url}`,\n    });\n  };\n\n  instance.replaceIdentity = (identity: Identity): void => {\n    client.replaceIdentity(identity);\n  };\n\n  instance.get = <T>(pathname: string, config?: GetConfig): Promise<HttpResponse<T>> => {\n    const url = `${baseURL + (pathname.startsWith(\"/\") ? pathname : `/${pathname}`)}`;\n\n    return rc.get(url, {\n      identity,\n      client,\n      ...config,\n    });\n  };\n\n  instance.post = <T>(pathname: string, data?: any, config?: PostConfig): Promise<HttpResponse<T>> => {\n    const url = `${baseURL + (pathname.startsWith(\"/\") ? pathname : `/${pathname}`)}`;\n\n    return rc.post(url, data, {\n      identity,\n      client,\n      ...config,\n    });\n  };\n\n  instance.put = <T>(pathname: string, data?: any, config?: PutConfig): Promise<HttpResponse<T>> => {\n    const url = `${baseURL + (pathname.startsWith(\"/\") ? pathname : `/${pathname}`)}`;\n\n    return rc.put(url, data, {\n      identity,\n      client,\n      ...config,\n    });\n  };\n\n  instance.delete = <T>(pathname: string, config?: DeleteConfig): Promise<HttpResponse<T>> => {\n    const url = `${baseURL + (pathname.startsWith(\"/\") ? pathname : `/${pathname}`)}`;\n\n    return rc.delete(url, {\n      identity,\n      client,\n      ...config,\n    });\n  };\n\n  return instance;\n};\n\nexport default rc;\n","export const idlFactory = ({ IDL }: { IDL: any }) => {\n  return IDL.Service({\n    http_request: IDL.Func(\n      [\n        IDL.Record({\n          url: IDL.Text,\n          method: IDL.Text,\n          body: IDL.Vec(IDL.Nat8),\n          headers: IDL.Vec(IDL.Tuple(IDL.Text, IDL.Text)),\n          certificate_version: IDL.Opt(IDL.Nat16),\n        }),\n      ],\n      [\n        IDL.Record({\n          body: IDL.Vec(IDL.Nat8),\n          headers: IDL.Vec(IDL.Tuple(IDL.Text, IDL.Text)),\n          upgrade: IDL.Opt(IDL.Bool),\n          streaming_strategy: IDL.Opt(\n            IDL.Variant({\n              Callback: IDL.Record({\n                token: IDL.Vec(IDL.Nat8),\n                callback: IDL.Func(\n                  [IDL.Vec(IDL.Nat8)],\n                  [\n                    IDL.Opt(\n                      IDL.Record({\n                        token: IDL.Opt(IDL.Vec(IDL.Nat8)),\n                        body: IDL.Vec(IDL.Nat8),\n                      })\n                    ),\n                  ],\n                  [\"query\"]\n                ),\n              }),\n            })\n          ),\n          status_code: IDL.Nat16,\n        }),\n      ],\n      [\"query\"]\n    ),\n    http_request_update: IDL.Func(\n      [\n        IDL.Record({\n          url: IDL.Text,\n          method: IDL.Text,\n          body: IDL.Vec(IDL.Nat8),\n          headers: IDL.Vec(IDL.Tuple(IDL.Text, IDL.Text)),\n        }),\n      ],\n      [\n        IDL.Record({\n          body: IDL.Vec(IDL.Nat8),\n          headers: IDL.Vec(IDL.Tuple(IDL.Text, IDL.Text)),\n          upgrade: IDL.Opt(IDL.Bool),\n          streaming_strategy: IDL.Opt(\n            IDL.Variant({\n              Callback: IDL.Record({\n                token: IDL.Vec(IDL.Nat8),\n                callback: IDL.Func(\n                  [IDL.Vec(IDL.Nat8)],\n                  [\n                    IDL.Opt(\n                      IDL.Record({\n                        token: IDL.Opt(IDL.Vec(IDL.Nat8)),\n                        body: IDL.Vec(IDL.Nat8),\n                      })\n                    ),\n                  ],\n                  [\"query\"]\n                ),\n              }),\n            })\n          ),\n          status_code: IDL.Nat16,\n        }),\n      ],\n      []\n    ),\n  });\n};\n","import { Actor, ActorSubclass, HttpAgent, Identity } from \"@dfinity/agent\";\nimport HttpStatus from \"http-status-codes\";\n\nimport { idlFactory } from \"./api-rest.did\";\nimport {\n  HttpRequest,\n  HttpResponse,\n  QueryConfig,\n  REST_ACTOR_SERVICE,\n  UpdateConfig,\n} from \"./canister-client.types\";\nimport { parseBodyRequest, parseHeadersRequest } from \"./request-parsers\";\nimport { parseBodyResponse, parseHeadersResponse } from \"./response-parsers\";\n\nexport class CanisterClient {\n  private url: URL;\n  private agent: HttpAgent;\n  private actor: ActorSubclass<REST_ACTOR_SERVICE>;\n\n  constructor(\n    url: string,\n    private identity?: Identity\n  ) {\n    this.url = new URL(url);\n    const canisterId = this.extractId(this.url.origin);\n    const hostUrl = this.getHostUrl(this.url.origin);\n    this.agent = this.createAgent(hostUrl, this.identity);\n    this.actor = this.createActor(canisterId);\n  }\n\n  private extractId(url: string): string {\n    var pattern = /(?:https?:\\/\\/)([^\\/.]+)\\./;\n    var match = url.match(pattern);\n    if (match) {\n      return match[1];\n    } else {\n      throw new Error(\"Invalid URL\");\n    }\n  }\n\n  private getHostUrl(url: string): string {\n    const textToReplace = `${this.extractId(url)}.`;\n    const hostUrl = new URL(url.replace(textToReplace, \"\")).href;\n    return hostUrl;\n  }\n\n  private createAgent(hostUrl: string, identity?: Identity): HttpAgent {\n    const agent = new HttpAgent({\n      host: hostUrl,\n      identity,\n    });\n\n    return agent;\n  }\n\n  private createActor(canisterId: string): ActorSubclass<REST_ACTOR_SERVICE> {\n    return Actor.createActor(idlFactory, {\n      agent: this.agent,\n      canisterId,\n    });\n  }\n\n  public replaceIdentity(identity: Identity) {\n    this.identity = identity;\n    this.agent.replaceIdentity(identity);\n  }\n\n  public async query(method: string, pathname: string, config?: QueryConfig): Promise<HttpResponse<any>> {\n    // TODO: Execute this only if host is local\n    await this.agent.fetchRootKey().then(() => {\n      console.log(\"Root key fetched\");\n    });\n\n    const queryParams = config?.params ? `?${new URLSearchParams(config.params).toString()}` : \"\";\n\n    const request: HttpRequest = {\n      method,\n      url: `${pathname || \"/\"}${queryParams}`,\n      body: [],\n      headers: config?.headers ? parseHeadersRequest(config.headers) : [],\n      certificate_version: [],\n    };\n\n    const result = await this.actor.http_request(request);\n\n    if (result.status_code >= 400) {\n      const error = {\n        data: parseBodyResponse(result.body),\n        status: result.status_code,\n        statusText: HttpStatus.getStatusText(result.status_code),\n        headers: parseHeadersResponse(result.headers),\n        request,\n      };\n\n      throw error;\n    }\n\n    const response: HttpResponse<any> = {\n      data: parseBodyResponse(result.body),\n      status: result.status_code,\n      statusText: HttpStatus.getStatusText(result.status_code),\n      headers: parseHeadersResponse(result.headers),\n      request,\n    };\n\n    return response;\n  }\n\n  public async update(\n    method: string,\n    pathname: string,\n    data?: any,\n    config?: UpdateConfig\n  ): Promise<HttpResponse<any>> {\n    // TODO: Execute this only if host is local\n    await this.agent.fetchRootKey().then(() => {\n      console.log(\"Root key fetched\");\n    });\n\n    const queryParams = config?.params ? `?${new URLSearchParams(config.params).toString()}` : \"\";\n    const body = data ? parseBodyRequest(data) : [];\n    const customHeaders: [string, string][] = config?.headers ? parseHeadersRequest(config.headers) : [];\n    const headers: [string, string][] = [[\"Content-Length\", `${body?.length ?? 0}`], ...customHeaders];\n\n    const request: HttpRequest = {\n      method,\n      url: `${pathname || \"/\"}${queryParams}`,\n      body: data ? parseBodyRequest(data) : [],\n      headers,\n      certificate_version: [],\n    };\n\n    const result = await this.actor.http_request_update(request);\n\n    if (result.status_code >= 400) {\n      const error = {\n        data: parseBodyResponse(result.body),\n        status: result.status_code,\n        statusText: HttpStatus.getStatusText(result.status_code),\n        headers: parseHeadersResponse(result.headers),\n        request,\n      };\n\n      throw error;\n    }\n\n    const response: HttpResponse<any> = {\n      data: parseBodyResponse(result.body),\n      status: result.status_code,\n      statusText: HttpStatus.getStatusText(result.status_code),\n      headers: parseHeadersResponse(result.headers),\n      request,\n    };\n\n    return response;\n  }\n}\n","/**\n * Converts a JavaScript object into an array of header key-value pairs.\n *\n * @param {Record<string, string>} headers - The object representing the headers with keys as header names and values as header values.\n * @returns {Array<[string, string]>} - An array of header key-value pairs.\n */\nexport function parseHeadersRequest(headers: Record<string, string>): [string, string][] {\n  return Object.entries(headers);\n}\n\n/**\n * Converts data based on its type. If the data is a string, it will be converted to a Uint8Array.\n * If the data is an array of numbers, it will be converted to a Uint8Array.\n * If the data is an object, it will be converted to a Uint8Array after converting to a JSON string.\n * If the data is neither a string, an array of numbers, nor an object, it will return null.\n *\n * @param {string | number[] | Record<string, unknown> | null} data - The data to be converted.\n * @returns {Uint8Array | null} - The converted data as a Uint8Array or null if the data cannot be converted.\n */\nexport function parseBodyRequest(data: string | number[] | Record<string, unknown> | null): Uint8Array {\n  const encoder = new TextEncoder();\n\n  if (typeof data === \"string\") {\n    // Attempt to convert string to object and then to JSON string\n    try {\n      return encoder.encode(data);\n    } catch (error) {\n      // If conversion to object and then to JSON string fails, return original string as Uint8Array\n      const encoder = new TextEncoder();\n      return encoder.encode(data);\n    }\n  }\n\n  if (Array.isArray(data) || (typeof data === \"object\" && data !== null)) {\n    // Convert array to JSON string and then to Uint8Array\n    try {\n      const jsonData = JSON.stringify(data);\n      return encoder.encode(jsonData);\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  throw new Error(\"Data type not supported\");\n}\n","/**\n * Parses an array of header key-value pairs into a JavaScript object.\n *\n * @param {Array<[string, string]>} headers - The array of header key-value pairs.\n * @returns {Record<string, string>} An object representing the headers with keys as header names and values as header values.\n */\nexport function parseHeadersResponse(headers: [string, string][]): Record<string, string> {\n  return headers.reduce((obj, [key, value]) => ({ ...obj, [key]: value }), {});\n}\n\n/**\n * Converts a Uint8Array or an array of numbers into a string or an array of numbers,\n * based on the type of data it represents.\n *\n * @param {Uint8Array | number[]} data The data to be converted, which can be either a Uint8Array or an array of numbers.\n * @returns {string | number[] | null} The converted data. If the input represents a string, it returns a string. If it represents an array of numbers, it returns an array of numbers. If the input cannot be converted to either, it returns null.\n */\nexport function parseBodyResponse(data: Uint8Array | number[]): any {\n  // Check if the body is a Uint8Array\n  if (data instanceof Uint8Array) {\n    // Attempt to convert the Uint8Array to a string\n    const stringData = (() => {\n      try {\n        const decoder = new TextDecoder(\"utf-8\");\n        return decoder.decode(data);\n      } catch (error) {\n        return null; // Not a string\n      }\n    })();\n\n    if (stringData !== null) {\n      try {\n        return JSON.parse(stringData);\n      } catch (error) {\n        return stringData;\n      }\n    }\n\n    // If it's not a string, convert to an array of numbers\n    return Array.from(data);\n  }\n\n  // Check if the body is an array of numbers\n  if (Array.isArray(data) && data.every((element) => typeof element === \"number\")) {\n    return data;\n  }\n\n  // If it's neither a Uint8Array nor an array of numbers, return null\n  return null;\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACAO,IAAM,aAAa,CAAC,EAAE,IAAI,MAAoB;AACnD,SAAO,IAAI,QAAQ;AAAA,IACjB,cAAc,IAAI;AAAA,MAChB;AAAA,QACE,IAAI,OAAO;AAAA,UACT,KAAK,IAAI;AAAA,UACT,QAAQ,IAAI;AAAA,UACZ,MAAM,IAAI,IAAI,IAAI,IAAI;AAAA,UACtB,SAAS,IAAI,IAAI,IAAI,MAAM,IAAI,MAAM,IAAI,IAAI,CAAC;AAAA,UAC9C,qBAAqB,IAAI,IAAI,IAAI,KAAK;AAAA,QACxC,CAAC;AAAA,MACH;AAAA,MACA;AAAA,QACE,IAAI,OAAO;AAAA,UACT,MAAM,IAAI,IAAI,IAAI,IAAI;AAAA,UACtB,SAAS,IAAI,IAAI,IAAI,MAAM,IAAI,MAAM,IAAI,IAAI,CAAC;AAAA,UAC9C,SAAS,IAAI,IAAI,IAAI,IAAI;AAAA,UACzB,oBAAoB,IAAI;AAAA,YACtB,IAAI,QAAQ;AAAA,cACV,UAAU,IAAI,OAAO;AAAA,gBACnB,OAAO,IAAI,IAAI,IAAI,IAAI;AAAA,gBACvB,UAAU,IAAI;AAAA,kBACZ,CAAC,IAAI,IAAI,IAAI,IAAI,CAAC;AAAA,kBAClB;AAAA,oBACE,IAAI;AAAA,sBACF,IAAI,OAAO;AAAA,wBACT,OAAO,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,CAAC;AAAA,wBAChC,MAAM,IAAI,IAAI,IAAI,IAAI;AAAA,sBACxB,CAAC;AAAA,oBACH;AAAA,kBACF;AAAA,kBACA,CAAC,OAAO;AAAA,gBACV;AAAA,cACF,CAAC;AAAA,YACH,CAAC;AAAA,UACH;AAAA,UACA,aAAa,IAAI;AAAA,QACnB,CAAC;AAAA,MACH;AAAA,MACA,CAAC,OAAO;AAAA,IACV;AAAA,IACA,qBAAqB,IAAI;AAAA,MACvB;AAAA,QACE,IAAI,OAAO;AAAA,UACT,KAAK,IAAI;AAAA,UACT,QAAQ,IAAI;AAAA,UACZ,MAAM,IAAI,IAAI,IAAI,IAAI;AAAA,UACtB,SAAS,IAAI,IAAI,IAAI,MAAM,IAAI,MAAM,IAAI,IAAI,CAAC;AAAA,QAChD,CAAC;AAAA,MACH;AAAA,MACA;AAAA,QACE,IAAI,OAAO;AAAA,UACT,MAAM,IAAI,IAAI,IAAI,IAAI;AAAA,UACtB,SAAS,IAAI,IAAI,IAAI,MAAM,IAAI,MAAM,IAAI,IAAI,CAAC;AAAA,UAC9C,SAAS,IAAI,IAAI,IAAI,IAAI;AAAA,UACzB,oBAAoB,IAAI;AAAA,YACtB,IAAI,QAAQ;AAAA,cACV,UAAU,IAAI,OAAO;AAAA,gBACnB,OAAO,IAAI,IAAI,IAAI,IAAI;AAAA,gBACvB,UAAU,IAAI;AAAA,kBACZ,CAAC,IAAI,IAAI,IAAI,IAAI,CAAC;AAAA,kBAClB;AAAA,oBACE,IAAI;AAAA,sBACF,IAAI,OAAO;AAAA,wBACT,OAAO,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,CAAC;AAAA,wBAChC,MAAM,IAAI,IAAI,IAAI,IAAI;AAAA,sBACxB,CAAC;AAAA,oBACH;AAAA,kBACF;AAAA,kBACA,CAAC,OAAO;AAAA,gBACV;AAAA,cACF,CAAC;AAAA,YACH,CAAC;AAAA,UACH;AAAA,UACA,aAAa,IAAI;AAAA,QACnB,CAAC;AAAA,MACH;AAAA,MACA,CAAC;AAAA,IACH;AAAA,EACF,CAAC;AACH;;;AChFA,mBAA0D;AAC1D,+BAAuB;;;ACKhB,SAAS,oBAAoB,SAAqD;AACvF,SAAO,OAAO,QAAQ,OAAO;AAC/B;AAWO,SAAS,iBAAiB,MAAsE;AACrG,QAAM,UAAU,IAAI,YAAY;AAEhC,MAAI,OAAO,SAAS,UAAU;AAE5B,QAAI;AACF,aAAO,QAAQ,OAAO,IAAI;AAAA,IAC5B,SAAS,OAAO;AAEd,YAAMA,WAAU,IAAI,YAAY;AAChC,aAAOA,SAAQ,OAAO,IAAI;AAAA,IAC5B;AAAA,EACF;AAEA,MAAI,MAAM,QAAQ,IAAI,KAAM,OAAO,SAAS,YAAY,SAAS,MAAO;AAEtE,QAAI;AACF,YAAM,WAAW,KAAK,UAAU,IAAI;AACpC,aAAO,QAAQ,OAAO,QAAQ;AAAA,IAChC,SAAS,OAAO;AACd,YAAM;AAAA,IACR;AAAA,EACF;AAEA,QAAM,IAAI,MAAM,yBAAyB;AAC3C;;;ACtCO,SAAS,qBAAqB,SAAqD;AACxF,SAAO,QAAQ,OAAO,CAAC,KAAK,CAAC,KAAK,KAAK,OAAO,EAAE,GAAG,KAAK,CAAC,GAAG,GAAG,MAAM,IAAI,CAAC,CAAC;AAC7E;AASO,SAAS,kBAAkB,MAAkC;AAElE,MAAI,gBAAgB,YAAY;AAE9B,UAAM,cAAc,MAAM;AACxB,UAAI;AACF,cAAM,UAAU,IAAI,YAAY,OAAO;AACvC,eAAO,QAAQ,OAAO,IAAI;AAAA,MAC5B,SAAS,OAAO;AACd,eAAO;AAAA,MACT;AAAA,IACF,GAAG;AAEH,QAAI,eAAe,MAAM;AACvB,UAAI;AACF,eAAO,KAAK,MAAM,UAAU;AAAA,MAC9B,SAAS,OAAO;AACd,eAAO;AAAA,MACT;AAAA,IACF;AAGA,WAAO,MAAM,KAAK,IAAI;AAAA,EACxB;AAGA,MAAI,MAAM,QAAQ,IAAI,KAAK,KAAK,MAAM,CAAC,YAAY,OAAO,YAAY,QAAQ,GAAG;AAC/E,WAAO;AAAA,EACT;AAGA,SAAO;AACT;;;AFnCO,IAAM,iBAAN,MAAqB;AAAA,EAK1B,YACE,KACQ,UACR;AADQ;AAER,SAAK,MAAM,IAAI,IAAI,GAAG;AACtB,UAAM,aAAa,KAAK,UAAU,KAAK,IAAI,MAAM;AACjD,UAAM,UAAU,KAAK,WAAW,KAAK,IAAI,MAAM;AAC/C,SAAK,QAAQ,KAAK,YAAY,SAAS,KAAK,QAAQ;AACpD,SAAK,QAAQ,KAAK,YAAY,UAAU;AAAA,EAC1C;AAAA,EAEQ,UAAU,KAAqB;AACrC,QAAI,UAAU;AACd,QAAI,QAAQ,IAAI,MAAM,OAAO;AAC7B,QAAI,OAAO;AACT,aAAO,MAAM,CAAC;AAAA,IAChB,OAAO;AACL,YAAM,IAAI,MAAM,aAAa;AAAA,IAC/B;AAAA,EACF;AAAA,EAEQ,WAAW,KAAqB;AACtC,UAAM,gBAAgB,GAAG,KAAK,UAAU,GAAG,CAAC;AAC5C,UAAM,UAAU,IAAI,IAAI,IAAI,QAAQ,eAAe,EAAE,CAAC,EAAE;AACxD,WAAO;AAAA,EACT;AAAA,EAEQ,YAAY,SAAiB,UAAgC;AACnE,UAAM,QAAQ,IAAI,uBAAU;AAAA,MAC1B,MAAM;AAAA,MACN;AAAA,IACF,CAAC;AAED,WAAO;AAAA,EACT;AAAA,EAEQ,YAAY,YAAuD;AACzE,WAAO,mBAAM,YAAY,YAAY;AAAA,MACnC,OAAO,KAAK;AAAA,MACZ;AAAA,IACF,CAAC;AAAA,EACH;AAAA,EAEO,gBAAgB,UAAoB;AACzC,SAAK,WAAW;AAChB,SAAK,MAAM,gBAAgB,QAAQ;AAAA,EACrC;AAAA,EAEA,MAAa,MAAM,QAAgB,UAAkB,QAAkD;AAErG,UAAM,KAAK,MAAM,aAAa,EAAE,KAAK,MAAM;AACzC,cAAQ,IAAI,kBAAkB;AAAA,IAChC,CAAC;AAED,UAAM,cAAc,QAAQ,SAAS,IAAI,IAAI,gBAAgB,OAAO,MAAM,EAAE,SAAS,CAAC,KAAK;AAE3F,UAAM,UAAuB;AAAA,MAC3B;AAAA,MACA,KAAK,GAAG,YAAY,GAAG,GAAG,WAAW;AAAA,MACrC,MAAM,CAAC;AAAA,MACP,SAAS,QAAQ,UAAU,oBAAoB,OAAO,OAAO,IAAI,CAAC;AAAA,MAClE,qBAAqB,CAAC;AAAA,IACxB;AAEA,UAAM,SAAS,MAAM,KAAK,MAAM,aAAa,OAAO;AAEpD,QAAI,OAAO,eAAe,KAAK;AAC7B,YAAM,QAAQ;AAAA,QACZ,MAAM,kBAAkB,OAAO,IAAI;AAAA,QACnC,QAAQ,OAAO;AAAA,QACf,YAAY,yBAAAC,QAAW,cAAc,OAAO,WAAW;AAAA,QACvD,SAAS,qBAAqB,OAAO,OAAO;AAAA,QAC5C;AAAA,MACF;AAEA,YAAM;AAAA,IACR;AAEA,UAAM,WAA8B;AAAA,MAClC,MAAM,kBAAkB,OAAO,IAAI;AAAA,MACnC,QAAQ,OAAO;AAAA,MACf,YAAY,yBAAAA,QAAW,cAAc,OAAO,WAAW;AAAA,MACvD,SAAS,qBAAqB,OAAO,OAAO;AAAA,MAC5C;AAAA,IACF;AAEA,WAAO;AAAA,EACT;AAAA,EAEA,MAAa,OACX,QACA,UACA,MACA,QAC4B;AAE5B,UAAM,KAAK,MAAM,aAAa,EAAE,KAAK,MAAM;AACzC,cAAQ,IAAI,kBAAkB;AAAA,IAChC,CAAC;AAED,UAAM,cAAc,QAAQ,SAAS,IAAI,IAAI,gBAAgB,OAAO,MAAM,EAAE,SAAS,CAAC,KAAK;AAC3F,UAAM,OAAO,OAAO,iBAAiB,IAAI,IAAI,CAAC;AAC9C,UAAM,gBAAoC,QAAQ,UAAU,oBAAoB,OAAO,OAAO,IAAI,CAAC;AACnG,UAAM,UAA8B,CAAC,CAAC,kBAAkB,GAAG,MAAM,UAAU,CAAC,EAAE,GAAG,GAAG,aAAa;AAEjG,UAAM,UAAuB;AAAA,MAC3B;AAAA,MACA,KAAK,GAAG,YAAY,GAAG,GAAG,WAAW;AAAA,MACrC,MAAM,OAAO,iBAAiB,IAAI,IAAI,CAAC;AAAA,MACvC;AAAA,MACA,qBAAqB,CAAC;AAAA,IACxB;AAEA,UAAM,SAAS,MAAM,KAAK,MAAM,oBAAoB,OAAO;AAE3D,QAAI,OAAO,eAAe,KAAK;AAC7B,YAAM,QAAQ;AAAA,QACZ,MAAM,kBAAkB,OAAO,IAAI;AAAA,QACnC,QAAQ,OAAO;AAAA,QACf,YAAY,yBAAAA,QAAW,cAAc,OAAO,WAAW;AAAA,QACvD,SAAS,qBAAqB,OAAO,OAAO;AAAA,QAC5C;AAAA,MACF;AAEA,YAAM;AAAA,IACR;AAEA,UAAM,WAA8B;AAAA,MAClC,MAAM,kBAAkB,OAAO,IAAI;AAAA,MACnC,QAAQ,OAAO;AAAA,MACf,YAAY,yBAAAA,QAAW,cAAc,OAAO,WAAW;AAAA,MACvD,SAAS,qBAAqB,OAAO,OAAO;AAAA,MAC5C;AAAA,IACF;AAEA,WAAO;AAAA,EACT;AACF;;;AF7IA,IAAM,KAAK,CAAI,YAAsD;AACnE,QAAM,EAAE,QAAQ,KAAK,MAAM,GAAG,OAAO,IAAI;AAEzC,UAAQ,QAAQ;AAAA,IACd,KAAK;AACH,aAAO,GAAG,IAAO,GAAG;AAAA,IACtB,KAAK;AACH,aAAO,GAAG,KAAQ,KAAK,MAAM,MAAM;AAAA,IACrC,KAAK;AACH,aAAO,GAAG,IAAO,KAAK,MAAM,MAAM;AAAA,IACpC,KAAK;AACH,aAAO,GAAG,OAAU,KAAK,MAAM;AAAA,IAEjC;AACE,YAAM,IAAI,MAAM,gBAAgB;AAAA,EACpC;AACF;AAEA,GAAG,MAAM,OAAU,KAAa,WAAiD;AAC/E,QAAM,EAAE,UAAU,GAAG,YAAY,IAAI,UAAU,CAAC;AAEhD,QAAM,SAAS,IAAI,IAAI,GAAG;AAC1B,QAAM,SAAS,QAAQ,UAAU,IAAI,eAAe,OAAO,QAAQ,QAAQ;AAE3E,SAAO,OAAO,MAAM,OAAO,OAAO,UAAU,WAAW;AACzD;AAEA,GAAG,OAAO,OAAU,KAAa,MAAW,WAAkD;AAC5F,QAAM,EAAE,UAAU,GAAG,WAAW,IAAI,UAAU,CAAC;AAE/C,QAAM,SAAS,IAAI,IAAI,GAAG;AAC1B,QAAM,SAAS,QAAQ,UAAU,IAAI,eAAe,OAAO,QAAQ,QAAQ;AAE3E,SAAO,OAAO,OAAO,QAAQ,OAAO,UAAU,MAAM,UAAU;AAChE;AAEA,GAAG,MAAM,OAAU,KAAa,MAAW,WAAiD;AAC1F,QAAM,EAAE,UAAU,GAAG,UAAU,IAAI,UAAU,CAAC;AAE9C,QAAM,SAAS,IAAI,IAAI,GAAG;AAC1B,QAAM,SAAS,QAAQ,UAAU,IAAI,eAAe,OAAO,QAAQ,QAAQ;AAE3E,SAAO,OAAO,OAAO,OAAO,OAAO,UAAU,MAAM,SAAS;AAC9D;AAEA,GAAG,SAAS,OAAU,KAAa,WAAoD;AACrF,QAAM,EAAE,UAAU,GAAG,aAAa,IAAI,UAAU,CAAC;AAEjD,QAAM,SAAS,IAAI,IAAI,GAAG;AAC1B,QAAM,SAAS,QAAQ,UAAU,IAAI,eAAe,OAAO,QAAQ,QAAQ;AAE3E,SAAO,OAAO,OAAO,UAAU,OAAO,UAAU,CAAC,GAAG,YAAY;AAClE;AAIA,GAAG,SAAS,CAAC,YAAiE;AAC5E,QAAM,EAAE,SAAS,SAAS,IAAI;AAE9B,QAAM,SAAS,IAAI,eAAe,SAAS,QAAQ;AAEnD,QAAM,WAAW,CAAIC,aAAsD;AACzE,UAAM,EAAE,IAAI,IAAIA;AAChB,WAAO,GAAG;AAAA,MACR;AAAA,MACA,GAAGA;AAAA,MACH,KAAK,IAAI,WAAW,GAAG,IAAI,MAAM,IAAI,GAAG;AAAA,IAC1C,CAAC;AAAA,EACH;AAEA,WAAS,kBAAkB,CAACC,cAA6B;AACvD,WAAO,gBAAgBA,SAAQ;AAAA,EACjC;AAEA,WAAS,MAAM,CAAI,UAAkB,WAAiD;AACpF,UAAM,MAAM,GAAG,WAAW,SAAS,WAAW,GAAG,IAAI,WAAW,IAAI,QAAQ,GAAG;AAE/E,WAAO,GAAG,IAAI,KAAK;AAAA,MACjB;AAAA,MACA;AAAA,MACA,GAAG;AAAA,IACL,CAAC;AAAA,EACH;AAEA,WAAS,OAAO,CAAI,UAAkB,MAAY,WAAkD;AAClG,UAAM,MAAM,GAAG,WAAW,SAAS,WAAW,GAAG,IAAI,WAAW,IAAI,QAAQ,GAAG;AAE/E,WAAO,GAAG,KAAK,KAAK,MAAM;AAAA,MACxB;AAAA,MACA;AAAA,MACA,GAAG;AAAA,IACL,CAAC;AAAA,EACH;AAEA,WAAS,MAAM,CAAI,UAAkB,MAAY,WAAiD;AAChG,UAAM,MAAM,GAAG,WAAW,SAAS,WAAW,GAAG,IAAI,WAAW,IAAI,QAAQ,GAAG;AAE/E,WAAO,GAAG,IAAI,KAAK,MAAM;AAAA,MACvB;AAAA,MACA;AAAA,MACA,GAAG;AAAA,IACL,CAAC;AAAA,EACH;AAEA,WAAS,SAAS,CAAI,UAAkB,WAAoD;AAC1F,UAAM,MAAM,GAAG,WAAW,SAAS,WAAW,GAAG,IAAI,WAAW,IAAI,QAAQ,GAAG;AAE/E,WAAO,GAAG,OAAO,KAAK;AAAA,MACpB;AAAA,MACA;AAAA,MACA,GAAG;AAAA,IACL,CAAC;AAAA,EACH;AAEA,SAAO;AACT;AAEA,IAAO,cAAQ;","names":["encoder","HttpStatus","options","identity"]}