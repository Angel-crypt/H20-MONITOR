import { Identity } from '@dfinity/agent';

type QueryConfig = {
    headers?: Record<string, string>;
    params?: Record<string, string>;
};
type UpdateConfig = {
    headers?: Record<string, string>;
    params?: Record<string, string>;
};
type HttpRequest = {
    url: string;
    method: string;
    body: Uint8Array | number[];
    headers: [string, string][];
    certificate_version: [] | [number];
};
type HttpResponse<T> = {
    data: T;
    status: number;
    statusText: string;
    headers: Record<string, string>;
    request: HttpRequest;
};

declare class CanisterClient {
    private identity?;
    private url;
    private agent;
    private actor;
    constructor(url: string, identity?: Identity | undefined);
    private extractId;
    private getHostUrl;
    private createAgent;
    private createActor;
    replaceIdentity(identity: Identity): void;
    query(method: string, pathname: string, config?: QueryConfig): Promise<HttpResponse<any>>;
    update(method: string, pathname: string, data?: any, config?: UpdateConfig): Promise<HttpResponse<any>>;
}

type RequestOptions = {
    method: "GET" | "POST" | "PUT" | "DELETE" | "PATCH" | "OPTIONS" | "HEAD" | string;
    url: string;
    data?: any;
    headers?: Record<string, string>;
    params?: Record<string, string>;
    identity?: Identity;
    client?: CanisterClient;
};
type GetConfig = {
    headers?: Record<string, string>;
    params?: Record<string, string>;
    identity?: Identity;
    client?: CanisterClient;
};
type PostConfig = {
    headers?: Record<string, string>;
    params?: Record<string, string>;
    identity?: Identity;
    client?: CanisterClient;
};
type PutConfig = {
    headers?: Record<string, string>;
    params?: Record<string, string>;
    identity?: Identity;
    client?: CanisterClient;
};
type DeleteConfig = {
    headers?: Record<string, string>;
    params?: Record<string, string>;
    identity?: Identity;
    client?: CanisterClient;
};
type CreateRestClientInstanceOptions = {
    baseURL: string;
    headers?: Record<string, string>;
    params?: Record<string, string>;
    identity?: Identity;
};
type RestClientInstance = {
    <T>(options: RequestOptions): Promise<HttpResponse<T>>;
    replaceIdentity: (identity: Identity) => void;
    get: <T>(url: string, config?: GetConfig) => Promise<HttpResponse<T>>;
    post: <T>(url: string, data?: any, config?: PostConfig) => Promise<HttpResponse<T>>;
    put: <T>(url: string, data?: any, config?: PutConfig) => Promise<HttpResponse<T>>;
    delete: <T>(url: string, config?: DeleteConfig) => Promise<HttpResponse<T>>;
};

declare const rc: {
    <T>(options: RequestOptions): Promise<HttpResponse<T>>;
    get<T_1>(url: string, config?: GetConfig): Promise<HttpResponse<T_1>>;
    post<T_2>(url: string, data: any, config?: PostConfig): Promise<HttpResponse<T_2>>;
    put<T_3>(url: string, data: any, config?: PutConfig): Promise<HttpResponse<T_3>>;
    delete<T_4>(url: string, config?: DeleteConfig): Promise<HttpResponse<T_4>>;
    create(options: CreateRestClientInstanceOptions): RestClientInstance;
};

export { type CreateRestClientInstanceOptions, type DeleteConfig, type GetConfig, type PostConfig, type PutConfig, type RequestOptions, type RestClientInstance, rc as default };
