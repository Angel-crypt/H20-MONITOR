import { Identity, SignIdentity, Signature, HttpAgentOptions, ActorConfig, ActorSubclass } from '@dfinity/agent';
import { Ed25519KeyIdentity, JsonnableDelegationChain, DelegationChain, DelegationIdentity, Ed25519PublicKey } from '@dfinity/identity';
import { RestClientInstance } from '@bundly/ares-rest';
import { EventEmitter as EventEmitter$1 } from 'events';
import { IDL } from '@dfinity/candid';
import { AuthClientStorage } from '@dfinity/auth-client';
import { StoredKey } from '@dfinity/auth-client/lib/cjs/storage';

declare class EventEmitter {
    private readonly eventManager;
    constructor(eventManager: EventEmitter$1);
    identityAdded(identity: Identity, provider: string): void;
    identityRemoved(identity: Identity): void;
}

type OnIdentityAddedCallbackPayload = {
    identity: Identity;
    provider: string;
};
type OnIdentityAddedCallback = (payload: OnIdentityAddedCallbackPayload) => void;
type OnIdentityRemoveCallbackPayload = {
    identity: Identity;
};
type OnIdentityRemoveCallback = (payload: OnIdentityRemoveCallbackPayload) => void;
declare class EventListener {
    private readonly eventManager;
    constructor(eventManager: EventEmitter$1);
    onIdentityAdded(callback: OnIdentityAddedCallback): void;
    onIdentityRemoved(callback: OnIdentityRemoveCallback): void;
}

declare const ECDSA_KEY_LABEL = "ECDSA";
declare const ED25519_KEY_LABEL = "Ed25519";
type BaseKeyType = typeof ECDSA_KEY_LABEL | typeof ED25519_KEY_LABEL;
interface IdentityProvider {
    name: string;
    displayName: string;
    logo: string;
    init: (client: Client, keyIdentity: Ed25519KeyIdentity) => Promise<void>;
    connect: () => Promise<void>;
    disconnect: (identity: Ed25519KeyIdentity) => Promise<void>;
}

type InternetIdentityCreateOptions = {
    providerUrl?: string;
    maxTimeToLive?: bigint;
};
declare class EmptyStorage implements AuthClientStorage {
    get(key: string): Promise<StoredKey>;
    set(key: string, value: any): Promise<void>;
    remove(key: string): Promise<void>;
}
declare class InternetIdentity implements IdentityProvider {
    private readonly config?;
    readonly name = "internet-identity";
    readonly displayName = "Internet Identity";
    readonly logo = "";
    private client;
    private keyIdentity;
    constructor(config?: InternetIdentityCreateOptions | undefined);
    init(client: Client, keyIdentity: Ed25519KeyIdentity): Promise<void>;
    connect(): Promise<void>;
    disconnect(identity: Identity): Promise<void>;
}

interface ClientStorageInterface {
    getItem: (key: string) => Promise<string | null>;
    setItem: (key: string, value: string) => Promise<void>;
    removeItem: (key: string) => Promise<void>;
}

declare class LocalStorage implements ClientStorageInterface {
    getItem(key: string): Promise<string | null>;
    setItem(key: string, value: string): Promise<void>;
    removeItem(key: string): Promise<void>;
}

declare const KEY_IDENTITY_KEY = "ARES_IDENTITY_KEY";
declare const DELEGATION_CHAINS_KEY = "ARES_DELEGATION_CHAINS_KEY";
type PersistentDelegationChain = {
    chain: JsonnableDelegationChain;
    provider: string;
};
type StoredIdentity = {
    identity: Identity;
    provider: string;
};
type StoredIdentityMap = Map<string, StoredIdentity>;
declare class IdentityManager {
    private storage;
    private keyIdentity;
    constructor(storage: ClientStorageInterface);
    init(): Promise<void>;
    getKeyIdentity(): Ed25519KeyIdentity;
    private getDelegationChains;
    private setDelegationChains;
    getIdentities(): Promise<StoredIdentityMap>;
    addDelegationChain(chain: DelegationChain, provider: string): Promise<DelegationIdentity>;
    removeIdentity(identity: Identity): Promise<void>;
}

declare class IncompleteEd25519KeyIdentity extends SignIdentity {
    private readonly _publicKey;
    constructor(_publicKey: Ed25519PublicKey);
    sign(blob: ArrayBuffer): Promise<Signature>;
    getPublicKey(): Ed25519PublicKey;
}

type GetIdentitiesResult = {
    identity: Identity;
    provider: string;
}[];
type CandidCanister = {
    agentConfig?: HttpAgentOptions;
    idlFactory: IDL.InterfaceFactory;
    actorConfig: ActorConfig;
};
type RestCanister = {
    baseUrl: string;
    agentConfig?: HttpAgentOptions;
};
type CreateClientConfig = {
    agentConfig?: HttpAgentOptions;
    candidCanisters?: Record<string, CandidCanister>;
    restCanisters?: Record<string, RestCanister>;
    providers?: IdentityProviders;
    storage?: ClientStorageInterface;
};
type ClientConfig = {
    agentConfig?: HttpAgentOptions;
    candidCanisters?: Record<string, CandidCanister>;
    restCanisters?: Record<string, RestCanister>;
    providers?: IdentityProviders;
    storage: ClientStorageInterface;
};
type IdentityProviders = IdentityProvider[];
type GetCandidActorOptions = {
    canisterId?: string;
};

declare class Client {
    private readonly config;
    private identityManager;
    eventEmitter: EventEmitter;
    eventListener: EventListener;
    private storage;
    private eventManager;
    private constructor();
    init(): Promise<void>;
    private createAgent;
    getIdentities(): Promise<GetIdentitiesResult>;
    addDelegationChain(chain: DelegationChain, provider: string): Promise<void>;
    removeIdentity(identity: Identity): Promise<void>;
    private createAgentOptions;
    getCandidActor(name: string, identity: Identity, options?: GetCandidActorOptions): ActorSubclass;
    getRestActor(name: string, identity: Identity): RestClientInstance;
    getProviders(): IdentityProviders;
    getProvider(name: string): IdentityProvider;
    static create(config: CreateClientConfig): Client;
}

export { type BaseKeyType, type CandidCanister, Client, type ClientConfig, type ClientStorageInterface, type CreateClientConfig, DELEGATION_CHAINS_KEY, ECDSA_KEY_LABEL, ED25519_KEY_LABEL, EmptyStorage, type GetCandidActorOptions, type GetIdentitiesResult, IdentityManager, type IdentityProvider, type IdentityProviders, IncompleteEd25519KeyIdentity, InternetIdentity, type InternetIdentityCreateOptions, KEY_IDENTITY_KEY, LocalStorage, type PersistentDelegationChain, type RestCanister, type StoredIdentity, type StoredIdentityMap };
