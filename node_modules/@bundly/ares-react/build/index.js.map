{"version":3,"sources":["../src/index.ts","../src/hooks/useAuth.ts","../src/context.tsx","../src/hooks/useCandidActor.ts","../src/hooks/useClient.ts","../src/hooks/useIdentities.ts","../src/hooks/useProvider.ts","../src/hooks/useProviders.ts","../src/hooks/useRestActor.ts","../src/components/internet-identity.button.tsx","../src/components/logout.button.tsx"],"sourcesContent":["export * from \"./hooks\";\nexport * from \"./components\";\nexport * from \"./context\";\n","import { Identity } from \"@dfinity/agent\";\nimport { useContext } from \"react\";\n\nimport { IcpConnectContext } from \"../context\";\n\nexport type Auth = {\n  currentIdentity: Identity;\n  isAuthenticated: boolean;\n  changeCurrentIdentity: (identity: Identity) => void;\n};\n\nexport const useAuth = (): Auth => {\n  const { isAuthenticated, currentIdentity, changeCurrentIdentity } = useContext(IcpConnectContext);\n\n  return {\n    currentIdentity,\n    isAuthenticated,\n    changeCurrentIdentity,\n  };\n};\n","import { AnonymousIdentity, Identity } from \"@dfinity/agent\";\nimport React, { ReactNode, createContext, useEffect, useState } from \"react\";\n\nimport { Client } from \"@bundly/ares-core\";\n\nexport type IcpConnectContextType = {\n  client: Client;\n  currentIdentity: Identity;\n  isAuthenticated: boolean;\n  identities: Identities;\n  changeCurrentIdentity: (identity: Identity) => void;\n};\n\nexport type IcpConnectContextProviderProps = {\n  children: ReactNode;\n  client: Client;\n};\n\nexport const IcpConnectContext = createContext<IcpConnectContextType>({} as any);\n\ntype Identities = {\n  identity: Identity;\n  provider: string;\n}[];\n\nexport const IcpConnectContextProvider = (props: IcpConnectContextProviderProps) => {\n  const [initialized, setInitialized] = useState(false);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [identities, setIdentities] = useState<Identities>([]);\n  // Persist the current identity\n  const [currentIdentity, setCurrentIdentity] = useState<Identity>(new AnonymousIdentity());\n  const [client] = useState<Client>(props.client);\n\n  useEffect(() => {\n    bootstrap();\n  }, []);\n\n  async function bootstrap() {\n    await client.init();\n    setListeners(client);\n\n    const storedIdentities = await client.getIdentities();\n    setIdentities(storedIdentities);\n    const identity = storedIdentities[0]?.identity || new AnonymousIdentity();\n    const isAuthenticated = !identity.getPrincipal().isAnonymous();\n\n    setCurrentIdentity(identity);\n    setIsAuthenticated(isAuthenticated);\n    setInitialized(true);\n  }\n\n  function setListeners(client: Client) {\n    client.eventListener.onIdentityAdded(async (payload) => {\n      const identities = await client.getIdentities();\n      setIdentities(identities);\n      setCurrentIdentity(payload.identity);\n      setIsAuthenticated(true);\n    });\n\n    client.eventListener.onIdentityRemoved(async (payload) => {\n      const newIdentities = await client.getIdentities();\n\n      setIdentities(newIdentities);\n\n      const identity = newIdentities[0]?.identity || new AnonymousIdentity();\n      const isAuthenticated = !identity.getPrincipal().isAnonymous();\n\n      setCurrentIdentity(identity);\n      setIsAuthenticated(isAuthenticated);\n    });\n  }\n\n  function changeCurrentIdentity(identity: Identity) {\n    setCurrentIdentity(identity);\n  }\n\n  return (\n    initialized && (\n      <IcpConnectContext.Provider\n        value={{\n          client,\n          identities,\n          currentIdentity,\n          isAuthenticated,\n          changeCurrentIdentity,\n        }}>\n        {props.children}\n      </IcpConnectContext.Provider>\n    )\n  );\n};\n","import { Identity } from \"@dfinity/agent\";\nimport { useContext } from \"react\";\n\nimport { GetCandidActorOptions } from \"@bundly/ares-core\";\n\nimport { IcpConnectContext } from \"../context\";\n\nexport const useCandidActor = <T, K extends keyof T = keyof T>(\n  name: K,\n  identity: Identity,\n  options?: GetCandidActorOptions\n): T[K] => {\n  const { client } = useContext(IcpConnectContext);\n\n  const actor = client.getCandidActor(name as string, identity, options);\n\n  return actor as T[K];\n};\n","import { useContext } from \"react\";\n\nimport { Client } from \"@bundly/ares-core\";\n\nimport { IcpConnectContext } from \"../context\";\n\nexport const useClient = (): Client => {\n  const { client } = useContext(IcpConnectContext);\n\n  return client;\n};\n","import { useContext } from \"react\";\n\nimport { IcpConnectContext } from \"../context\";\n\nexport const useIdentities = () => {\n  const { identities } = useContext(IcpConnectContext);\n\n  return identities;\n};\n","import { useContext } from \"react\";\n\nimport { IcpConnectContext } from \"../context\";\n\nexport const useProvider = (name: string) => {\n  const { client } = useContext(IcpConnectContext);\n\n  return client.getProvider(name);\n};\n","import { useContext } from \"react\";\n\nimport { IcpConnectContext } from \"../context\";\n\nexport const useProviders = () => {\n  const { client } = useContext(IcpConnectContext);\n\n  return client.getProviders();\n};\n","import { Identity } from \"@dfinity/agent\";\nimport { useContext } from \"react\";\n\nimport { RestClientInstance } from \"@bundly/ares-rest\";\n\nimport { IcpConnectContext } from \"../context\";\n\nexport const useRestActor = (name: string, identity: Identity): RestClientInstance => {\n  const { client } = useContext(IcpConnectContext);\n\n  const actor = client.getRestActor(name, identity);\n\n  return actor;\n};\n","import { useProvider } from \"hooks\";\nimport React, { CSSProperties } from \"react\";\n\nexport type InternetIdentityButtonProps = {\n  children?: React.ReactNode;\n  style?: CSSProperties;\n  onSuccess?: () => void;\n  onError?: (error: any) => void;\n};\n\nexport function InternetIdentityButton(props: InternetIdentityButtonProps) {\n  const provider = useProvider(\"internet-identity\");\n\n  async function login() {\n    try {\n      await provider.connect();\n      props.onSuccess?.();\n    } catch (error: any) {\n      props.onError?.(error);\n    }\n  }\n\n  return (\n    <button onClick={() => login()} style={props.style || styles.button}>\n      {props.children || \"Login with Internet Identity\"}\n    </button>\n  );\n}\n\nconst styles = {\n  button: {\n    backgroundColor: \"white\",\n    color: \"black\",\n    padding: \"8px 16px\",\n    border: \"1px solid #ccc\",\n    borderRadius: \"4px\",\n    cursor: \"pointer\",\n    transition: \"background-color 0.3s ease-in-out\",\n    boxShadow: \"0 2px 4px rgba(0, 0, 0, 0.1)\",\n  },\n};\n","import { Identity } from \"@dfinity/agent\";\nimport React, { CSSProperties } from \"react\";\n\nimport { useClient } from \"../hooks\";\n\nexport type LogoutButtonProps = {\n  identity: Identity;\n  children?: React.ReactNode;\n  style?: CSSProperties;\n};\n\nexport function LogoutButton(props: LogoutButtonProps) {\n  const client = useClient();\n\n  async function logout(identity: Identity) {\n    try {\n      client.removeIdentity(identity);\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  return (\n    <button onClick={() => logout(props.identity)} style={props.style || styles.button}>\n      {props.children || \"Logout\"}\n    </button>\n  );\n}\n\nconst styles = {\n  button: {\n    backgroundColor: \"white\",\n    color: \"black\",\n    padding: \"8px 16px\",\n    border: \"1px solid #ccc\",\n    borderRadius: \"4px\",\n    cursor: \"pointer\",\n    transition: \"background-color 0.3s ease-in-out\",\n    boxShadow: \"0 2px 4px rgba(0, 0, 0, 0.1)\",\n  },\n};\n"],"mappings":"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","names":["import_react","isAuthenticated","client","identities","React","import_react","import_react","import_react","import_react","import_react","import_react","import_react","React","import_react","React","styles"]}