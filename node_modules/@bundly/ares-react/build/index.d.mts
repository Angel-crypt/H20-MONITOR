import * as _dfinity_agent from '@dfinity/agent';
import { Identity } from '@dfinity/agent';
import * as _bundly_ares_core from '@bundly/ares-core';
import { GetCandidActorOptions, Client } from '@bundly/ares-core';
import { RestClientInstance } from '@bundly/ares-rest';
import React, { CSSProperties, ReactNode } from 'react';

type Auth = {
    currentIdentity: Identity;
    isAuthenticated: boolean;
    changeCurrentIdentity: (identity: Identity) => void;
};
declare const useAuth: () => Auth;

declare const useCandidActor: <T, K extends keyof T = keyof T>(name: K, identity: Identity, options?: GetCandidActorOptions) => T[K];

declare const useClient: () => Client;

declare const useIdentities: () => {
    identity: _dfinity_agent.Identity;
    provider: string;
}[];

declare const useProvider: (name: string) => _bundly_ares_core.IdentityProvider;

declare const useProviders: () => _bundly_ares_core.IdentityProviders;

declare const useRestActor: (name: string, identity: Identity) => RestClientInstance;

type InternetIdentityButtonProps = {
    children?: React.ReactNode;
    style?: CSSProperties;
    onSuccess?: () => void;
    onError?: (error: any) => void;
};
declare function InternetIdentityButton(props: InternetIdentityButtonProps): React.JSX.Element;

type LogoutButtonProps = {
    identity: Identity;
    children?: React.ReactNode;
    style?: CSSProperties;
};
declare function LogoutButton(props: LogoutButtonProps): React.JSX.Element;

type IcpConnectContextType = {
    client: Client;
    currentIdentity: Identity;
    isAuthenticated: boolean;
    identities: Identities;
    changeCurrentIdentity: (identity: Identity) => void;
};
type IcpConnectContextProviderProps = {
    children: ReactNode;
    client: Client;
};
declare const IcpConnectContext: React.Context<IcpConnectContextType>;
type Identities = {
    identity: Identity;
    provider: string;
}[];
declare const IcpConnectContextProvider: (props: IcpConnectContextProviderProps) => false | React.JSX.Element;

export { type Auth, IcpConnectContext, IcpConnectContextProvider, type IcpConnectContextProviderProps, type IcpConnectContextType, InternetIdentityButton, type InternetIdentityButtonProps, LogoutButton, type LogoutButtonProps, useAuth, useCandidActor, useClient, useIdentities, useProvider, useProviders, useRestActor };
