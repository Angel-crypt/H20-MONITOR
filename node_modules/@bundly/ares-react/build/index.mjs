var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// src/hooks/useAuth.ts
import { useContext } from "react";

// src/context.tsx
import { AnonymousIdentity } from "@dfinity/agent";
import React, { createContext, useEffect, useState } from "react";
var IcpConnectContext = createContext({});
var IcpConnectContextProvider = (props) => {
  const [initialized, setInitialized] = useState(false);
  const [isAuthenticated, setIsAuthenticated] = useState(false);
  const [identities, setIdentities] = useState([]);
  const [currentIdentity, setCurrentIdentity] = useState(new AnonymousIdentity());
  const [client] = useState(props.client);
  useEffect(() => {
    bootstrap();
  }, []);
  function bootstrap() {
    return __async(this, null, function* () {
      var _a;
      yield client.init();
      setListeners(client);
      const storedIdentities = yield client.getIdentities();
      setIdentities(storedIdentities);
      const identity = ((_a = storedIdentities[0]) == null ? void 0 : _a.identity) || new AnonymousIdentity();
      const isAuthenticated2 = !identity.getPrincipal().isAnonymous();
      setCurrentIdentity(identity);
      setIsAuthenticated(isAuthenticated2);
      setInitialized(true);
    });
  }
  function setListeners(client2) {
    client2.eventListener.onIdentityAdded((payload) => __async(this, null, function* () {
      const identities2 = yield client2.getIdentities();
      setIdentities(identities2);
      setCurrentIdentity(payload.identity);
      setIsAuthenticated(true);
    }));
    client2.eventListener.onIdentityRemoved((payload) => __async(this, null, function* () {
      var _a;
      const newIdentities = yield client2.getIdentities();
      setIdentities(newIdentities);
      const identity = ((_a = newIdentities[0]) == null ? void 0 : _a.identity) || new AnonymousIdentity();
      const isAuthenticated2 = !identity.getPrincipal().isAnonymous();
      setCurrentIdentity(identity);
      setIsAuthenticated(isAuthenticated2);
    }));
  }
  function changeCurrentIdentity(identity) {
    setCurrentIdentity(identity);
  }
  return initialized && /* @__PURE__ */ React.createElement(
    IcpConnectContext.Provider,
    {
      value: {
        client,
        identities,
        currentIdentity,
        isAuthenticated,
        changeCurrentIdentity
      }
    },
    props.children
  );
};

// src/hooks/useAuth.ts
var useAuth = () => {
  const { isAuthenticated, currentIdentity, changeCurrentIdentity } = useContext(IcpConnectContext);
  return {
    currentIdentity,
    isAuthenticated,
    changeCurrentIdentity
  };
};

// src/hooks/useCandidActor.ts
import { useContext as useContext2 } from "react";
var useCandidActor = (name, identity, options) => {
  const { client } = useContext2(IcpConnectContext);
  const actor = client.getCandidActor(name, identity, options);
  return actor;
};

// src/hooks/useClient.ts
import { useContext as useContext3 } from "react";
var useClient = () => {
  const { client } = useContext3(IcpConnectContext);
  return client;
};

// src/hooks/useIdentities.ts
import { useContext as useContext4 } from "react";
var useIdentities = () => {
  const { identities } = useContext4(IcpConnectContext);
  return identities;
};

// src/hooks/useProvider.ts
import { useContext as useContext5 } from "react";
var useProvider = (name) => {
  const { client } = useContext5(IcpConnectContext);
  return client.getProvider(name);
};

// src/hooks/useProviders.ts
import { useContext as useContext6 } from "react";
var useProviders = () => {
  const { client } = useContext6(IcpConnectContext);
  return client.getProviders();
};

// src/hooks/useRestActor.ts
import { useContext as useContext7 } from "react";
var useRestActor = (name, identity) => {
  const { client } = useContext7(IcpConnectContext);
  const actor = client.getRestActor(name, identity);
  return actor;
};

// src/components/internet-identity.button.tsx
import React2 from "react";
function InternetIdentityButton(props) {
  const provider = useProvider("internet-identity");
  function login() {
    return __async(this, null, function* () {
      var _a, _b;
      try {
        yield provider.connect();
        (_a = props.onSuccess) == null ? void 0 : _a.call(props);
      } catch (error) {
        (_b = props.onError) == null ? void 0 : _b.call(props, error);
      }
    });
  }
  return /* @__PURE__ */ React2.createElement("button", { onClick: () => login(), style: props.style || styles.button }, props.children || "Login with Internet Identity");
}
var styles = {
  button: {
    backgroundColor: "white",
    color: "black",
    padding: "8px 16px",
    border: "1px solid #ccc",
    borderRadius: "4px",
    cursor: "pointer",
    transition: "background-color 0.3s ease-in-out",
    boxShadow: "0 2px 4px rgba(0, 0, 0, 0.1)"
  }
};

// src/components/logout.button.tsx
import React3 from "react";
function LogoutButton(props) {
  const client = useClient();
  function logout(identity) {
    return __async(this, null, function* () {
      try {
        client.removeIdentity(identity);
      } catch (error) {
        throw error;
      }
    });
  }
  return /* @__PURE__ */ React3.createElement("button", { onClick: () => logout(props.identity), style: props.style || styles2.button }, props.children || "Logout");
}
var styles2 = {
  button: {
    backgroundColor: "white",
    color: "black",
    padding: "8px 16px",
    border: "1px solid #ccc",
    borderRadius: "4px",
    cursor: "pointer",
    transition: "background-color 0.3s ease-in-out",
    boxShadow: "0 2px 4px rgba(0, 0, 0, 0.1)"
  }
};
export {
  IcpConnectContext,
  IcpConnectContextProvider,
  InternetIdentityButton,
  LogoutButton,
  useAuth,
  useCandidActor,
  useClient,
  useIdentities,
  useProvider,
  useProviders,
  useRestActor
};
//# sourceMappingURL=index.mjs.map