"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// src/index.ts
var src_exports = {};
__export(src_exports, {
  IcpConnectContext: () => IcpConnectContext,
  IcpConnectContextProvider: () => IcpConnectContextProvider,
  InternetIdentityButton: () => InternetIdentityButton,
  LogoutButton: () => LogoutButton,
  useAuth: () => useAuth,
  useCandidActor: () => useCandidActor,
  useClient: () => useClient,
  useIdentities: () => useIdentities,
  useProvider: () => useProvider,
  useProviders: () => useProviders,
  useRestActor: () => useRestActor
});
module.exports = __toCommonJS(src_exports);

// src/hooks/useAuth.ts
var import_react2 = require("react");

// src/context.tsx
var import_agent = require("@dfinity/agent");
var import_react = __toESM(require("react"));
var IcpConnectContext = (0, import_react.createContext)({});
var IcpConnectContextProvider = (props) => {
  const [initialized, setInitialized] = (0, import_react.useState)(false);
  const [isAuthenticated, setIsAuthenticated] = (0, import_react.useState)(false);
  const [identities, setIdentities] = (0, import_react.useState)([]);
  const [currentIdentity, setCurrentIdentity] = (0, import_react.useState)(new import_agent.AnonymousIdentity());
  const [client] = (0, import_react.useState)(props.client);
  (0, import_react.useEffect)(() => {
    bootstrap();
  }, []);
  function bootstrap() {
    return __async(this, null, function* () {
      var _a;
      yield client.init();
      setListeners(client);
      const storedIdentities = yield client.getIdentities();
      setIdentities(storedIdentities);
      const identity = ((_a = storedIdentities[0]) == null ? void 0 : _a.identity) || new import_agent.AnonymousIdentity();
      const isAuthenticated2 = !identity.getPrincipal().isAnonymous();
      setCurrentIdentity(identity);
      setIsAuthenticated(isAuthenticated2);
      setInitialized(true);
    });
  }
  function setListeners(client2) {
    client2.eventListener.onIdentityAdded((payload) => __async(this, null, function* () {
      const identities2 = yield client2.getIdentities();
      setIdentities(identities2);
      setCurrentIdentity(payload.identity);
      setIsAuthenticated(true);
    }));
    client2.eventListener.onIdentityRemoved((payload) => __async(this, null, function* () {
      var _a;
      const newIdentities = yield client2.getIdentities();
      setIdentities(newIdentities);
      const identity = ((_a = newIdentities[0]) == null ? void 0 : _a.identity) || new import_agent.AnonymousIdentity();
      const isAuthenticated2 = !identity.getPrincipal().isAnonymous();
      setCurrentIdentity(identity);
      setIsAuthenticated(isAuthenticated2);
    }));
  }
  function changeCurrentIdentity(identity) {
    setCurrentIdentity(identity);
  }
  return initialized && /* @__PURE__ */ import_react.default.createElement(
    IcpConnectContext.Provider,
    {
      value: {
        client,
        identities,
        currentIdentity,
        isAuthenticated,
        changeCurrentIdentity
      }
    },
    props.children
  );
};

// src/hooks/useAuth.ts
var useAuth = () => {
  const { isAuthenticated, currentIdentity, changeCurrentIdentity } = (0, import_react2.useContext)(IcpConnectContext);
  return {
    currentIdentity,
    isAuthenticated,
    changeCurrentIdentity
  };
};

// src/hooks/useCandidActor.ts
var import_react3 = require("react");
var useCandidActor = (name, identity, options) => {
  const { client } = (0, import_react3.useContext)(IcpConnectContext);
  const actor = client.getCandidActor(name, identity, options);
  return actor;
};

// src/hooks/useClient.ts
var import_react4 = require("react");
var useClient = () => {
  const { client } = (0, import_react4.useContext)(IcpConnectContext);
  return client;
};

// src/hooks/useIdentities.ts
var import_react5 = require("react");
var useIdentities = () => {
  const { identities } = (0, import_react5.useContext)(IcpConnectContext);
  return identities;
};

// src/hooks/useProvider.ts
var import_react6 = require("react");
var useProvider = (name) => {
  const { client } = (0, import_react6.useContext)(IcpConnectContext);
  return client.getProvider(name);
};

// src/hooks/useProviders.ts
var import_react7 = require("react");
var useProviders = () => {
  const { client } = (0, import_react7.useContext)(IcpConnectContext);
  return client.getProviders();
};

// src/hooks/useRestActor.ts
var import_react8 = require("react");
var useRestActor = (name, identity) => {
  const { client } = (0, import_react8.useContext)(IcpConnectContext);
  const actor = client.getRestActor(name, identity);
  return actor;
};

// src/components/internet-identity.button.tsx
var import_react9 = __toESM(require("react"));
function InternetIdentityButton(props) {
  const provider = useProvider("internet-identity");
  function login() {
    return __async(this, null, function* () {
      var _a, _b;
      try {
        yield provider.connect();
        (_a = props.onSuccess) == null ? void 0 : _a.call(props);
      } catch (error) {
        (_b = props.onError) == null ? void 0 : _b.call(props, error);
      }
    });
  }
  return /* @__PURE__ */ import_react9.default.createElement("button", { onClick: () => login(), style: props.style || styles.button }, props.children || "Login with Internet Identity");
}
var styles = {
  button: {
    backgroundColor: "white",
    color: "black",
    padding: "8px 16px",
    border: "1px solid #ccc",
    borderRadius: "4px",
    cursor: "pointer",
    transition: "background-color 0.3s ease-in-out",
    boxShadow: "0 2px 4px rgba(0, 0, 0, 0.1)"
  }
};

// src/components/logout.button.tsx
var import_react10 = __toESM(require("react"));
function LogoutButton(props) {
  const client = useClient();
  function logout(identity) {
    return __async(this, null, function* () {
      try {
        client.removeIdentity(identity);
      } catch (error) {
        throw error;
      }
    });
  }
  return /* @__PURE__ */ import_react10.default.createElement("button", { onClick: () => logout(props.identity), style: props.style || styles2.button }, props.children || "Logout");
}
var styles2 = {
  button: {
    backgroundColor: "white",
    color: "black",
    padding: "8px 16px",
    border: "1px solid #ccc",
    borderRadius: "4px",
    cursor: "pointer",
    transition: "background-color 0.3s ease-in-out",
    boxShadow: "0 2px 4px rgba(0, 0, 0, 0.1)"
  }
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  IcpConnectContext,
  IcpConnectContextProvider,
  InternetIdentityButton,
  LogoutButton,
  useAuth,
  useCandidActor,
  useClient,
  useIdentities,
  useProvider,
  useProviders,
  useRestActor
});
//# sourceMappingURL=index.js.map